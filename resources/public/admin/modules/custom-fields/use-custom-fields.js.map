{"version":3,"sources":["webpack:///projects-root/laravel/public/admin/modules/custom-fields/use-custom-fields.js","webpack:///webpack/bootstrap f0e4ecdad0d01391b07e","webpack:///./core/custom-fields/resources/assets/js/admin/modules/custom-fields/use-custom-fields.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","18","19","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","UseCustomFields","this","$body","$","$_UPDATE_TO","$_EXPORT_TO","CURRENT_DATA","Helpers","jsonDecode","val","handleCustomFields","exportData","value","_self","repeaterFieldAdded","FIELD_TEMPLATE","fieldGroup","html","globalSkeleton","text","number","email","password","textarea","checkbox","radio","select","image","file","wysiwyg","repeater","repeaterItem","repeaterFieldLine","initWYSIWYG","$element","type","WebEd","toolbar","initCustomFieldsBoxes","boxes","$appendTo","forEach","box","indexBox","skeleton","replace","title","instructions","$skeleton","find","append","registerLine","data","result","$wrapper","options","placeholderText","defaultValue","rows","defaultImage","attr","$result","parseChoices","selectChoices","choice","index","arrayGet","choices","boxValue","template","inArray","isChecked","id","slug","prop","buttonLabel","sortable","registerRepeaterItem","items","wysiwygToolbar","dataItem","indexData","indexCss","registerRepeaterFieldLine","item","choiceString","split","currentChoice","trim","push","on","event","preventDefault","current","parent","animate","opacity","remove","toggleClass","$groupWrapper","extend","prev","registeredData","group","indexGroup","groupTemplate","$groupTemplate","getFieldGroups","fieldGroups","each","$current","currentData","$items","getFieldItems","getFieldItemValue","$item","customFieldData","getRepeaterItemData","$where","getRepeaterItemValue","closest","jsonEncode","document","ready","jQuery"],"mappings":"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","file":"projects-root/laravel/public/admin/modules/custom-fields/use-custom-fields.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 18);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(19);\n\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports) {\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UseCustomFields = function () {\n    function UseCustomFields() {\n        _classCallCheck(this, UseCustomFields);\n\n        this.$body = $('body');\n\n        /**\n         * Where to show the custom field elements\n         */\n        this.$_UPDATE_TO = $('#custom_fields_container');\n        /**\n         * Where to export json data when submit form\n         */\n        this.$_EXPORT_TO = $('#custom_fields_json');\n\n        this.CURRENT_DATA = Helpers.jsonDecode(this.$_EXPORT_TO.val(), []);\n\n        if (this.CURRENT_DATA) {\n            this.handleCustomFields();\n            this.exportData();\n        }\n    }\n\n    _createClass(UseCustomFields, [{\n        key: 'handleCustomFields',\n        value: function handleCustomFields() {\n            var _self = this;\n\n            var repeaterFieldAdded = 0;\n            /**\n             * The html template of custom fields\n             */\n            var FIELD_TEMPLATE = {\n                fieldGroup: $('#_render_customfield_field_group_template').html(),\n                globalSkeleton: $('#_render_customfield_global_skeleton_template').html(),\n                text: $('#_render_customfield_text_template').html(),\n                number: $('#_render_customfield_number_template').html(),\n                email: $('#_render_customfield_email_template').html(),\n                password: $('#_render_customfield_password_template').html(),\n                textarea: $('#_render_customfield_textarea_template').html(),\n                checkbox: $('#_render_customfield_checkbox_template').html(),\n                radio: $('#_render_customfield_radio_template').html(),\n                select: $('#_render_customfield_select_template').html(),\n                image: $('#_render_customfield_image_template').html(),\n                file: $('#_render_customfield_file_template').html(),\n                wysiwyg: $('#_render_customfield_wysiswg_template').html(),\n                repeater: $('#_render_customfield_repeater_template').html(),\n                repeaterItem: $('#_render_customfield_repeater_item_template').html(),\n                repeaterFieldLine: $('#_render_customfield_repeater_line_template').html()\n            };\n\n            var initWYSIWYG = function initWYSIWYG($element, type) {\n                \"use strict\";\n\n                WebEd.wysiwyg($element, {\n                    toolbar: 'basic'\n                });\n                return $element;\n            };\n\n            var initCustomFieldsBoxes = function initCustomFieldsBoxes(boxes, $appendTo) {\n                boxes.forEach(function (box, indexBox) {\n                    var skeleton = FIELD_TEMPLATE.globalSkeleton;\n                    skeleton = skeleton.replace(/__type__/gi, box.type || '');\n                    skeleton = skeleton.replace(/__title__/gi, box.title || '');\n                    skeleton = skeleton.replace(/__instructions__/gi, box.instructions || '');\n\n                    var $skeleton = $(skeleton);\n                    $skeleton.find('.meta-box-wrap').append(registerLine(box));\n                    $skeleton.data('lcf-registered-data', box);\n                    $appendTo.append($skeleton);\n                });\n            };\n\n            var registerLine = function registerLine(box) {\n                var result = FIELD_TEMPLATE[box.type],\n                    $wrapper = $('<div class=\"lcf-' + box.type + '-wrapper\"></div>');\n                $wrapper.data('lcf-registered-data', box);\n                switch (box.type) {\n                    case 'text':\n                    case 'number':\n                    case 'email':\n                    case 'password':\n                        result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                        result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                        break;\n                    case 'textarea':\n                        result = result.replace(/__rows__/gi, box.options.rows || 3);\n                        result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                        result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                        break;\n                    case 'image':\n                        result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                        if (!box.value) {\n                            var defaultImage = $(result).find('img').attr('data-default');\n                            result = result.replace(/__image__/gi, defaultImage || box.options.defaultValue || '');\n                        } else {\n                            result = result.replace(/__image__/gi, box.value || box.options.defaultValue || '');\n                        }\n                        break;\n                    case 'file':\n                        result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                        break;\n                    case 'select':\n                        {\n                            var $result = $(result);\n                            var choices = parseChoices(box.options.selectChoices);\n                            choices.forEach(function (choice, index) {\n                                $result.append('<option value=\"' + choice[0] + '\">' + choice[1] + '</option>');\n                            });\n                            $result.val(Helpers.arrayGet(box, 'value', box.options.defaultValue));\n                            $wrapper.append($result);\n                            return $wrapper;\n                        }\n                        break;\n                    case 'checkbox':\n                        {\n                            var _choices = parseChoices(box.options.selectChoices);\n                            var boxValue = Helpers.jsonDecode(box.value);\n                            _choices.forEach(function (choice, index) {\n                                var template = result.replace(/__value__/gi, choice[0] || '');\n                                template = template.replace(/__title__/gi, choice[1] || '');\n                                template = template.replace(/__checked__/gi, $.inArray(choice[0], boxValue) != -1 ? 'checked' : '');\n                                $wrapper.append($(template));\n                            });\n                            return $wrapper;\n                        }\n                        break;\n                    case 'radio':\n                        {\n                            var _choices2 = parseChoices(box.options.selectChoices);\n                            var isChecked = false;\n                            _choices2.forEach(function (choice, index) {\n                                var template = result.replace(/__value__/gi, choice[0] || '');\n                                template = template.replace(/__id__/gi, box.id + box.slug + repeaterFieldAdded);\n                                template = template.replace(/__title__/gi, choice[1] || '');\n                                template = template.replace(/__checked__/gi, box.value === choice[0] ? 'checked' : '');\n                                $wrapper.append($(template));\n\n                                if (box.value === choice[0]) {\n                                    isChecked = true;\n                                }\n                            });\n                            if (isChecked === false) {\n                                $wrapper.find('input[type=radio]:first').prop('checked', true);\n                            }\n                            return $wrapper;\n                        }\n                        break;\n                    case 'repeater':\n                        {\n                            var _$result = $(result);\n                            _$result.data('lcf-registered-data', box);\n\n                            _$result.find('> .repeater-add-new-field').html(box.options.buttonLabel || 'Add new item');\n                            _$result.find('> .sortable-wrapper').sortable();\n                            registerRepeaterItem(box.items, box.value || [], _$result.find('> .field-group-items'));\n                            return _$result;\n                        }\n                        break;\n                    case 'wysiwyg':\n                        {\n                            result = result.replace(/__value__/gi, box.value || '');\n                            var _$result2 = $(result);\n                            return initWYSIWYG(_$result2, box.options.wysiwygToolbar || 'basic');\n                        }\n                        break;\n                }\n                $wrapper.append($(result));\n                return $wrapper;\n            };\n\n            var registerRepeaterItem = function registerRepeaterItem(items, data, $appendTo) {\n                $appendTo.data('lcf-registered-data', items);\n                data.forEach(function (dataItem, indexData) {\n                    var indexCss = $appendTo.find('> .ui-sortable-handle').length + 1;\n                    var result = FIELD_TEMPLATE.repeaterItem;\n                    result = result.replace(/__position__/gi, indexCss);\n\n                    var $result = $(result);\n                    $result.data('lcf-registered-data', items);\n\n                    registerRepeaterFieldLine(items, dataItem, $result.find('> .field-line-wrapper > .field-group'));\n\n                    $appendTo.append($result);\n                });\n                return $appendTo;\n            };\n\n            var registerRepeaterFieldLine = function registerRepeaterFieldLine(items, data, $appendTo) {\n                data.forEach(function (item, index) {\n                    repeaterFieldAdded++;\n\n                    var result = FIELD_TEMPLATE.repeaterFieldLine;\n                    result = result.replace(/__title__/gi, item.title || '');\n                    result = result.replace(/__instructions__/gi, item.instructions || '');\n\n                    var $result = $(result);\n                    $result.data('lcf-registered-data', item);\n                    $result.find('> .repeater-item-input').append(registerLine(item));\n\n                    $appendTo.append($result);\n                });\n                return $appendTo;\n            };\n\n            var parseChoices = function parseChoices(choiceString) {\n                var choices = [];\n                choiceString.split('\\n').forEach(function (item, index) {\n                    var currentChoice = item.split(':');\n                    if (currentChoice[0] && currentChoice[1]) {\n                        currentChoice[0] = currentChoice[0].trim();\n                        currentChoice[1] = currentChoice[1].trim();\n                    }\n                    choices.push(currentChoice);\n                });\n                return choices;\n            };\n\n            /**\n             * Remove field item\n             */\n            this.$body.on('click', '.remove-field-line', function (event) {\n                event.preventDefault();\n                var current = $(this);\n                current.parent().animate({\n                    opacity: 0.1\n                }, 300, function () {\n                    current.parent().remove();\n                });\n            });\n\n            /**\n             * Collapse field item\n             */\n            this.$body.on('click', '.collapse-field-line', function (event) {\n                event.preventDefault();\n                var current = $(this);\n                current.toggleClass('collapsed-line');\n            });\n\n            /**\n             * Add new repeater line\n             */\n            this.$body.on('click', '.repeater-add-new-field', function (event) {\n                event.preventDefault();\n                var $groupWrapper = $.extend(true, {}, $(this).prev('.field-group-items'));\n                var registeredData = $groupWrapper.data('lcf-registered-data');\n\n                repeaterFieldAdded++;\n\n                registerRepeaterItem(registeredData, [registeredData], $groupWrapper);\n            });\n\n            /**\n             * Init data when page loaded\n             */\n            this.CURRENT_DATA.forEach(function (group, indexGroup) {\n                var groupTemplate = FIELD_TEMPLATE.fieldGroup;\n                groupTemplate = groupTemplate.replace(/__title__/gi, group.title || '');\n\n                var $groupTemplate = $(groupTemplate);\n\n                initCustomFieldsBoxes(group.items, $groupTemplate.find('.meta-boxes-body'));\n\n                $groupTemplate.data('lcf-field-group', group);\n\n                _self.$_UPDATE_TO.append($groupTemplate);\n            });\n        }\n    }, {\n        key: 'exportData',\n        value: function exportData() {\n            var _self = this;\n\n            var getFieldGroups = function getFieldGroups() {\n                var fieldGroups = [];\n\n                $('#custom_fields_container').find('> .meta-boxes').each(function () {\n                    var $current = $(this);\n                    var currentData = $current.data('lcf-field-group');\n                    var $items = $current.find('> .meta-boxes-body > .meta-box');\n                    currentData.items = getFieldItems($items);\n                    fieldGroups.push(currentData);\n                });\n                return fieldGroups;\n            };\n\n            var getFieldItems = function getFieldItems($items) {\n                var items = [];\n                $items.each(function () {\n                    items.push(getFieldItemValue($(this)));\n                });\n                return items;\n            };\n\n            var getFieldItemValue = function getFieldItemValue($item) {\n                var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n                switch (customFieldData.type) {\n                    case 'text':\n                    case 'number':\n                    case 'email':\n                    case 'password':\n                    case 'image':\n                    case 'file':\n                        customFieldData.value = $item.find('> .meta-box-wrap input').val();\n                        break;\n                    case 'wysiwyg':\n                    case 'textarea':\n                        customFieldData.value = $item.find('> .meta-box-wrap textarea').val();\n                        break;\n                    case 'checkbox':\n                        customFieldData.value = [];\n                        $item.find('> .meta-box-wrap input:checked').each(function () {\n                            customFieldData.value.push($(this).val());\n                        });\n                        break;\n                    case 'radio':\n                        customFieldData.value = $item.find('> .meta-box-wrap input:checked').val();\n                        break;\n                    case 'select':\n                        customFieldData.value = $item.find('> .meta-box-wrap select').val();\n                        break;\n                    case 'repeater':\n                        customFieldData.value = [];\n                        var $repeaterItems = $item.find('> .meta-box-wrap > .lcf-repeater > .field-group-items > li');\n                        $repeaterItems.each(function () {\n                            var $current = $(this);\n                            var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                            customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                        });\n                        break;\n                    default:\n                        customFieldData = null;\n                        break;\n                }\n                return customFieldData;\n            };\n\n            var getRepeaterItemData = function getRepeaterItemData($where) {\n                var data = [];\n                $where.each(function () {\n                    var $current = $(this);\n                    data.push(getRepeaterItemValue($current));\n                });\n                return data;\n            };\n\n            var getRepeaterItemValue = function getRepeaterItemValue($item) {\n                var customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n                switch (customFieldData.type) {\n                    case 'text':\n                    case 'number':\n                    case 'email':\n                    case 'password':\n                    case 'image':\n                    case 'file':\n                        customFieldData.value = $item.find('> .repeater-item-input input').val();\n                        break;\n                    case 'wysiwyg':\n                    case 'textarea':\n                        customFieldData.value = $item.find('> .repeater-item-input textarea').val();\n                        break;\n                    case 'checkbox':\n                        customFieldData.value = [];\n                        $item.find('> .repeater-item-input input:checked').each(function () {\n                            customFieldData.value.push($(this).val());\n                        });\n                        break;\n                    case 'radio':\n                        customFieldData.value = $item.find('> .repeater-item-input input:checked').val();\n                        break;\n                    case 'select':\n                        customFieldData.value = $item.find('> .repeater-item-input select').val();\n                        break;\n                    case 'repeater':\n                        customFieldData.value = [];\n                        var $repeaterItems = $item.find('> .repeater-item-input > .lcf-repeater > .field-group-items > li');\n                        $repeaterItems.each(function () {\n                            var $current = $(this);\n                            var fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                            customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                        });\n                        break;\n                    default:\n                        customFieldData = null;\n                        break;\n                }\n                return customFieldData;\n            };\n\n            _self.$_EXPORT_TO.closest('form').on('submit', function (event) {\n                _self.$_EXPORT_TO.val(Helpers.jsonEncode(getFieldGroups()));\n            });\n        }\n    }]);\n\n    return UseCustomFields;\n}();\n\n(function ($) {\n    $(document).ready(function () {\n        new UseCustomFields();\n    });\n})(jQuery);\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// projects-root/laravel/public/admin/modules/custom-fields/use-custom-fields.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f0e4ecdad0d01391b07e","class UseCustomFields {\n    constructor() {\n        this.$body = $('body');\n\n        /**\n         * Where to show the custom field elements\n         */\n        this.$_UPDATE_TO = $('#custom_fields_container');\n        /**\n         * Where to export json data when submit form\n         */\n        this.$_EXPORT_TO = $('#custom_fields_json');\n\n        this.CURRENT_DATA = Helpers.jsonDecode(this.$_EXPORT_TO.val(), []);\n\n        if (this.CURRENT_DATA) {\n            this.handleCustomFields();\n            this.exportData();\n        }\n    }\n\n    handleCustomFields() {\n        let _self = this;\n\n        let repeaterFieldAdded = 0;\n        /**\n         * The html template of custom fields\n         */\n        let FIELD_TEMPLATE = {\n            fieldGroup: $('#_render_customfield_field_group_template').html(),\n            globalSkeleton: $('#_render_customfield_global_skeleton_template').html(),\n            text: $('#_render_customfield_text_template').html(),\n            number: $('#_render_customfield_number_template').html(),\n            email: $('#_render_customfield_email_template').html(),\n            password: $('#_render_customfield_password_template').html(),\n            textarea: $('#_render_customfield_textarea_template').html(),\n            checkbox: $('#_render_customfield_checkbox_template').html(),\n            radio: $('#_render_customfield_radio_template').html(),\n            select: $('#_render_customfield_select_template').html(),\n            image: $('#_render_customfield_image_template').html(),\n            file: $('#_render_customfield_file_template').html(),\n            wysiwyg: $('#_render_customfield_wysiswg_template').html(),\n            repeater: $('#_render_customfield_repeater_template').html(),\n            repeaterItem: $('#_render_customfield_repeater_item_template').html(),\n            repeaterFieldLine: $('#_render_customfield_repeater_line_template').html()\n        };\n\n        let initWYSIWYG = function ($element, type) {\n            \"use strict\";\n            WebEd.wysiwyg($element, {\n                toolbar: 'basic'\n            });\n            return $element;\n        };\n\n        let initCustomFieldsBoxes = function (boxes, $appendTo) {\n            boxes.forEach(function (box, indexBox) {\n                let skeleton = FIELD_TEMPLATE.globalSkeleton;\n                skeleton = skeleton.replace(/__type__/gi, box.type || '');\n                skeleton = skeleton.replace(/__title__/gi, box.title || '');\n                skeleton = skeleton.replace(/__instructions__/gi, box.instructions || '');\n\n                let $skeleton = $(skeleton);\n                $skeleton.find('.meta-box-wrap').append(registerLine(box));\n                $skeleton.data('lcf-registered-data', box);\n                $appendTo.append($skeleton);\n            });\n        };\n\n        let registerLine = function (box) {\n            let result = FIELD_TEMPLATE[box.type],\n                $wrapper = $('<div class=\"lcf-' + box.type + '-wrapper\"></div>');\n            $wrapper.data('lcf-registered-data', box);\n            switch (box.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                    result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'textarea':\n                    result = result.replace(/__rows__/gi, box.options.rows || 3);\n                    result = result.replace(/__placeholderText__/gi, box.options.placeholderText || '');\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'image':\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    if (!box.value) {\n                        let defaultImage = $(result).find('img').attr('data-default');\n                        result = result.replace(/__image__/gi, defaultImage || box.options.defaultValue || '');\n                    } else {\n                        result = result.replace(/__image__/gi, box.value || box.options.defaultValue || '');\n                    }\n                    break;\n                case 'file':\n                    result = result.replace(/__value__/gi, box.value || box.options.defaultValue || '');\n                    break;\n                case 'select': {\n                    let $result = $(result);\n                    let choices = parseChoices(box.options.selectChoices);\n                    choices.forEach(function (choice, index) {\n                        $result.append('<option value=\"' + choice[0] + '\">' + choice[1] + '</option>');\n                    });\n                    $result.val(Helpers.arrayGet(box, 'value', box.options.defaultValue));\n                    $wrapper.append($result);\n                    return $wrapper;\n                }\n                    break;\n                case 'checkbox': {\n                    let choices = parseChoices(box.options.selectChoices);\n                    let boxValue = Helpers.jsonDecode(box.value);\n                    choices.forEach(function (choice, index) {\n                        let template = result.replace(/__value__/gi, choice[0] || '');\n                        template = template.replace(/__title__/gi, choice[1] || '');\n                        template = template.replace(/__checked__/gi, ($.inArray(choice[0], boxValue) != -1) ? 'checked' : '');\n                        $wrapper.append($(template));\n                    });\n                    return $wrapper;\n                }\n                    break;\n                case 'radio': {\n                    let choices = parseChoices(box.options.selectChoices);\n                    let isChecked = false;\n                    choices.forEach(function (choice, index) {\n                        let template = result.replace(/__value__/gi, choice[0] || '');\n                        template = template.replace(/__id__/gi, box.id + box.slug + repeaterFieldAdded);\n                        template = template.replace(/__title__/gi, choice[1] || '');\n                        template = template.replace(/__checked__/gi, (box.value === choice[0]) ? 'checked' : '');\n                        $wrapper.append($(template));\n\n                        if (box.value === choice[0]) {\n                            isChecked = true;\n                        }\n                    });\n                    if (isChecked === false) {\n                        $wrapper.find('input[type=radio]:first').prop('checked', true);\n                    }\n                    return $wrapper;\n                }\n                    break;\n                case 'repeater': {\n                    let $result = $(result);\n                    $result.data('lcf-registered-data', box);\n\n                    $result.find('> .repeater-add-new-field').html(box.options.buttonLabel || 'Add new item');\n                    $result.find('> .sortable-wrapper').sortable();\n                    registerRepeaterItem(box.items, box.value || [], $result.find('> .field-group-items'));\n                    return $result;\n                }\n                    break;\n                case 'wysiwyg': {\n                    result = result.replace(/__value__/gi, box.value || '');\n                    let $result = $(result);\n                    return initWYSIWYG($result, box.options.wysiwygToolbar || 'basic');\n                }\n                    break;\n            }\n            $wrapper.append($(result));\n            return $wrapper;\n        };\n\n        let registerRepeaterItem = function (items, data, $appendTo) {\n            $appendTo.data('lcf-registered-data', items);\n            data.forEach(function (dataItem, indexData) {\n                let indexCss = $appendTo.find('> .ui-sortable-handle').length + 1;\n                let result = FIELD_TEMPLATE.repeaterItem;\n                result = result.replace(/__position__/gi, indexCss);\n\n                let $result = $(result);\n                $result.data('lcf-registered-data', items);\n\n                registerRepeaterFieldLine(items, dataItem, $result.find('> .field-line-wrapper > .field-group'));\n\n                $appendTo.append($result);\n            });\n            return $appendTo;\n        };\n\n        let registerRepeaterFieldLine = function (items, data, $appendTo) {\n            data.forEach(function (item, index) {\n                repeaterFieldAdded++;\n\n                let result = FIELD_TEMPLATE.repeaterFieldLine;\n                result = result.replace(/__title__/gi, item.title || '');\n                result = result.replace(/__instructions__/gi, item.instructions || '');\n\n                let $result = $(result);\n                $result.data('lcf-registered-data', item);\n                $result.find('> .repeater-item-input').append(registerLine(item));\n\n                $appendTo.append($result);\n            });\n            return $appendTo;\n        };\n\n        let parseChoices = function (choiceString) {\n            let choices = [];\n            choiceString.split('\\n').forEach(function (item, index) {\n                let currentChoice = item.split(':');\n                if (currentChoice[0] && currentChoice[1]) {\n                    currentChoice[0] = currentChoice[0].trim();\n                    currentChoice[1] = currentChoice[1].trim();\n                }\n                choices.push(currentChoice);\n            });\n            return choices;\n        };\n\n        /**\n         * Remove field item\n         */\n        this.$body.on('click', '.remove-field-line', function (event) {\n            event.preventDefault();\n            let current = $(this);\n            current.parent().animate({\n                    opacity: 0.1\n                },\n                300, function () {\n                    current.parent().remove();\n                });\n        });\n\n        /**\n         * Collapse field item\n         */\n        this.$body.on('click', '.collapse-field-line', function (event) {\n            event.preventDefault();\n            let current = $(this);\n            current.toggleClass('collapsed-line');\n        });\n\n        /**\n         * Add new repeater line\n         */\n        this.$body.on('click', '.repeater-add-new-field', function (event) {\n            event.preventDefault();\n            let $groupWrapper = $.extend(true, {}, $(this).prev('.field-group-items'));\n            let registeredData = $groupWrapper.data('lcf-registered-data');\n\n            repeaterFieldAdded++;\n\n            registerRepeaterItem(registeredData, [registeredData], $groupWrapper);\n        });\n\n        /**\n         * Init data when page loaded\n         */\n        this.CURRENT_DATA.forEach(function (group, indexGroup) {\n            let groupTemplate = FIELD_TEMPLATE.fieldGroup;\n            groupTemplate = groupTemplate.replace(/__title__/gi, group.title || '');\n\n            let $groupTemplate = $(groupTemplate);\n\n            initCustomFieldsBoxes(group.items, $groupTemplate.find('.meta-boxes-body'));\n\n            $groupTemplate.data('lcf-field-group', group);\n\n            _self.$_UPDATE_TO.append($groupTemplate);\n        });\n    }\n\n    exportData() {\n        let _self = this;\n\n        let getFieldGroups = function () {\n            let fieldGroups = [];\n\n            $('#custom_fields_container').find('> .meta-boxes').each(function () {\n                let $current = $(this);\n                let currentData = $current.data('lcf-field-group');\n                let $items = $current.find('> .meta-boxes-body > .meta-box');\n                currentData.items = getFieldItems($items);\n                fieldGroups.push(currentData);\n            });\n            return fieldGroups;\n        };\n\n        let getFieldItems = function ($items) {\n            let items = [];\n            $items.each(function () {\n                items.push(getFieldItemValue($(this)));\n            });\n            return items;\n        };\n\n        let getFieldItemValue = function ($item) {\n            let customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n            switch (customFieldData.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                case 'image':\n                case 'file':\n                    customFieldData.value = $item.find('> .meta-box-wrap input').val();\n                    break;\n                case 'wysiwyg':\n                case 'textarea':\n                    customFieldData.value = $item.find('> .meta-box-wrap textarea').val();\n                    break;\n                case 'checkbox':\n                    customFieldData.value = [];\n                    $item.find('> .meta-box-wrap input:checked').each(function () {\n                        customFieldData.value.push($(this).val());\n                    });\n                    break;\n                case 'radio':\n                    customFieldData.value = $item.find('> .meta-box-wrap input:checked').val();\n                    break;\n                case 'select':\n                    customFieldData.value = $item.find('> .meta-box-wrap select').val();\n                    break;\n                case 'repeater':\n                    customFieldData.value = [];\n                    let $repeaterItems = $item.find('> .meta-box-wrap > .lcf-repeater > .field-group-items > li');\n                    $repeaterItems.each(function () {\n                        let $current = $(this);\n                        let fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                        customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                    });\n                    break;\n                default:\n                    customFieldData = null;\n                    break;\n            }\n            return customFieldData;\n        };\n\n        let getRepeaterItemData = function ($where) {\n            let data = [];\n            $where.each(function () {\n                let $current = $(this);\n                data.push(getRepeaterItemValue($current));\n            });\n            return data;\n        };\n\n        let getRepeaterItemValue = function ($item) {\n            let customFieldData = $.extend(true, {}, $item.data('lcf-registered-data'));\n            switch (customFieldData.type) {\n                case 'text':\n                case 'number':\n                case 'email':\n                case 'password':\n                case 'image':\n                case 'file':\n                    customFieldData.value = $item.find('> .repeater-item-input input').val();\n                    break;\n                case 'wysiwyg':\n                case 'textarea':\n                    customFieldData.value = $item.find('> .repeater-item-input textarea').val();\n                    break;\n                case 'checkbox':\n                    customFieldData.value = [];\n                    $item.find('> .repeater-item-input input:checked').each(function () {\n                        customFieldData.value.push($(this).val());\n                    });\n                    break;\n                case 'radio':\n                    customFieldData.value = $item.find('> .repeater-item-input input:checked').val();\n                    break;\n                case 'select':\n                    customFieldData.value = $item.find('> .repeater-item-input select').val();\n                    break;\n                case 'repeater':\n                    customFieldData.value = [];\n                    let $repeaterItems = $item.find('> .repeater-item-input > .lcf-repeater > .field-group-items > li');\n                    $repeaterItems.each(function () {\n                        let $current = $(this);\n                        let fieldGroup = $current.find('> .field-line-wrapper > .field-group');\n                        customFieldData.value.push(getRepeaterItemData(fieldGroup.find('> li')));\n                    });\n                    break;\n                default:\n                    customFieldData = null;\n                    break;\n            }\n            return customFieldData;\n        };\n\n        _self.$_EXPORT_TO.closest('form').on('submit', function (event) {\n            _self.$_EXPORT_TO.val(Helpers.jsonEncode(getFieldGroups()));\n        });\n    }\n}\n\n(function ($) {\n    $(document).ready(function () {\n        new UseCustomFields();\n    });\n})(jQuery);\n\n\n\n// WEBPACK FOOTER //\n// ./core/custom-fields/resources/assets/js/admin/modules/custom-fields/use-custom-fields.js"],"sourceRoot":""}